namespace scala com.gu.flexibleoctopus.model.thrift

/** date times are reprsented as i64 - epoch millis */
typedef i64 DateTime

/** 
* A single story bundle that maps directly to a piece of content in Composer 
*/
struct StoryBundle {

    1: required i64 id;

    2: required string composerId;

    3: required string pubCode;

    4: required string sectionCode;

    5: required Article article;

}

/** The legal statues of an article */
enum Lawyered {
    NOTAPPLICABLE = 0,
    PENDING = 1,
    CLEARED = 2,
    PRIORITY = 3 
}

/** Where an article is going to be published */
enum ForPublication {
    WEB = 0,
    PRINT = 1,
    BOTH = 2
}

/** The workflow statuses of the article */ 
enum ArticleStatus {
    CHIEFSUB = 0,
    DESK = 1,
    FINALLED = 2,
    HOLD = 3,
    KILLED = 4,
    REVISESUB = 5,
    SUBS = 6,
    WRITERS = 7
}

/** The object types that can be present in an article */
enum ArticleObjectType {
    BODYTEXT = 0,
    BYLINE = 1,
    CAPTION = 2,
    DATE = 3,
    END NOTE = 4,
    FOLIO = 5,
    HEADLINE = 6,
    INDEX = 7,
    LABEL = 8,
    LINKTEXT = 9,
    PANELTEXT = 10,
    PICTURECREDIT = 11,
    PULLQUOTE = 12,
    STANDFIRST = 13,
    STARTNOTE = 14,
    STRAP = 15,
    TABULARTEXT = 16,
    TRAIL = 17,
    WEBHEADLINE = 18,
    WEBSTANDFIRST = 19
}

/**
* Represents a single article of a story bundle as generated by inCopy, 
* such as the headline, standfirst, or body text
*/
struct Article {

    // id for the article
    1: required i64 id;

    // id for the book section
    2: required i64 bookSectionId;

    // indicates whether the article is for web and/or print pulication
    3: required ForPublication forPublication;

    // current user that has the article checked out
    4: required string inUseBy; 

    // whether the article is currently checked out by a user
    5: required bool isCheckedOut;

    // when the last version of the article was saved
    6: required DateTime lastModified;

    // current legal status of the article
    7: required Lawyered lawyered;

    // the kind of text the article contains
    8: required ArticleObjectType objectType;

    // the primary page that the article is on 
    9: required i64 onPage;

    // the issue date 
    10: required DateTime pubDate;

    // the workflow status of the article
    11: required ArticleStatus status;
}